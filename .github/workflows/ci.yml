name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_ENV: test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

jobs:
  # Job 1: Quality Checks
  quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.18.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Check code formatting
      run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

    - name: TypeScript type check
      run: npx tsc --noEmit

    - name: Security audit
      run: npm audit --audit-level moderate

  # Job 2: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        node-version: [18.18.0, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:cov

    - name: Upload coverage reports
      if: matrix.node-version == '18.18.0'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.18.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: npm run migrations:run

    - name: Run integration tests
      run: npm run test:integration

  # Job 4: E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [quality, integration-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.18.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      run: npm run migrations:run

    - name: Run E2E tests
      run: npm run test:e2e

  # Job 5: Build and Deploy (solo en main/master)
  deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.18.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Build Docker image
      run: docker build -t graphql-api:${{ github.sha }} .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/

    # Aquí puedes agregar el despliegue a tu plataforma preferida
    # - name: Deploy to production
    #   run: echo "Deploying to production..."

  # Job 6: Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, deploy]
    if: always()

    steps:
    - name: Notify success
      if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success'
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
      run: echo "❌ Some tests failed. Please check the logs."
